!<arch>
0-isupper.c/    0           0     0     644     251       `
#include "main.h"

/**
*_isupper - function that verifies if a  character is uppercase or not
*@c: tested character
*Return: returns 1 if it is uppercase , 0 if not
*/
int _isupper(int c)

{

if ((c >= 'A') && (c <= 'Z'))

return (1);

return (0);

}

0-memset.c/     0           0     0     644     355       `
#include "main.h"
/**
 *_memset - fill a block of memory with a specific value
 *@s: starting address of memory to be filled
 *@b: the desired value
 *@n: number of bytes to be changed
 *
 *Return: changed array with new value for n bytes
 */
char *_memset(char *s, char b, unsigned int n)
{
int i = 0;
while (n > 0)
{
s[i] = b;
i++;
n--;
}
return (s);
}

0-strcat.c/     0           0     0     644     303       `
#include "main.h"
/**
 * _strcat - concatinate 2 strings.
 * @dest: first string.
 * @src: second string.
 * Return: string.
 */
char *_strcat(char *dest, char *src)
{
int i = 0, j = 0;
while (dest[i] != '\0')
i++;
while (src[j] != '\0')
{
dest[i] = src[j];
i++;
j++;
}
dest[i] = '\0';
return (dest);
}

100-atoi.c/     0           0     0     644     528       `
#include "main.h"
/**
 * _atoi - converts a string to an integer.
 * @s: input string.
 * Return: integer.
 */
int _atoi(char *s)
{
unsigned int count = 0, size = 0, oi = 0, pn = 1, m = 1, i;
while (*(s + count) != '\0')
{
if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
break;
if (*(s + count) == '-')
pn *= -1;
if ((*(s + count) >= '0') && (*(s + count) <= '9'))
{
if (size > 0)
m *= 10;
size++;
}
count++;
}
for (i = count - size; i < count; i++)
{
oi = oi + ((*(s + i) - 48) * m);
m /= 10;
}
return (oi * pn);
}
1-isdigit.c/    0           0     0     644     248       `
#include "main.h"

/**
*_isdigit - function that verifies if a  character is a digit or not
*@c: tested character
*Return: returns 1 if it is uppercase , 0 if not
*/

int _isdigit(int c)

{

if ((c >= 48) && (c <= 57))

return (1);

return (0);

}
1-memcpy.c/     0           0     0     644     351       `
#include "main.h"
/**
 *_memcpy - a function that copies memory area
 *@dest: memory where is stored
 *@src: memory where is copied
 *@n: number of bytes
 *
 *Return: copied memory with n byted changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
int i = 0;
int j = 0;
while (n > 0)
{
dest[i] = src[j];
i++;
j++;
n--;
}
return (dest);
}

1-strncat.c/    0           0     0     644     380       `
#include "main.h"
/**
 * _strncat - concatinate 2 strings.
 * @dest: first string.
 * @src: second string.
 * @n: the number of bytes to use from src.
 * Return: string.
 */
char *_strncat(char *dest, char *src, int n)
{
int i = 0, k = 0;
while (dest[i] != '\0')
i++;
while (src[k] != '\0' && n > k)
{
dest[i] = src[k];
k++;
i++;
}
if (n > 0)
{
dest[i] = '\0';
}
return (dest);
}
2-strchr.c/     0           0     0     644     226       `
#include "main.h"
/**
 * _strchr - Entry point
 * @s: input
 * @c: input
 * Return: Always 0 (Success)
 */
char *_strchr(char *s, char c)
{
int i = 0;
for (; s[i] >= '\0'; i++)
{
if (s[i] == c)
return (&s[i]);
}
return (0);
}
2-strlen.c/     0           0     0     644     222       `
#include "main.h"
/**
 * _strlen - returns the length of a string.
 * @s: input stringeturn.
 * Return: length of a string.
 */
int _strlen(char *s)
{
int count = 0;
while (*(s + count) != '\0')
count++;
return (count);
}
2-strncpy.c/    0           0     0     644     376       `
#include "main.h"
/**
 * _strncpy - copy src into dest.
 * @dest: first string.
 * @src: second string.
 * @n: the number of bytes to use from src.
 * Return: string.
 */
char *_strncpy(char *dest, char *src, int n)
{
int i = 0, k = 0;
while (n > k)
{
if (src[k] == '\0')
{
for (; k < n; k++)
{
dest[i] = '\0';
i++;
}
}
else
{
dest[i] = src[k];
k++;
i++;
}
}
return (dest);
}
3-islower.c/    0           0     0     644     214       `
#include "main.h"
/**
 * _islower - Short description, single line
 * @c: contains value to be compared
 * Return: 0 Always
 */
int _islower(int c)
{
if (c > 'a' && c < 'z')
{
return (1);
}

else
{
return (0);
}
}
3-puts.c/       0           0     0     644     229       `
#include "main.h"
/**
 * _puts - prints a string, followed by a new line,
 * @str: pointer to the string to print
 * Return: void
 */
void _puts(char *str)
{
int i = 0;
while (str[i])
{
_putchar(str[i]);
i++;
}
_putchar('\n');
}

3-strcmp.c/     0           0     0     644     282       `
#include "main.h"
#include <stdio.h>
/**
 * _strcmp - compare two strings.
 * @s1: string 1.
 * @s2: string 2.
 * Return: int.
 */
int _strcmp(char *s1, char *s2)
{
int i = 0, cmp = 0;
while (s1[i] != '\0' && s2[i] != '\0' && cmp == 0)
{
cmp = s1[i] - s2[i];
i++;
}
return (cmp);
}
4-isalpha.c/    0           0     0     644     242       `
#include "main.h"
/**
 * _isalpha - retun 1 if c is letter, uppercase or lowercase
 * @c: The int to print
 * Return: 0 Always
 */
int _isalpha(int c)
{
if ((c > 'a' && c < 'z') || (c > 'A' && c < 'Z'))
{
return (1);
}
else
{
return (0);
}
}
4-strpbrk.c/    0           0     0     644     432       `
#include "main.h"
#include <stddef.h>
/**
 * _strpbrk - searching a string for any of a set of bytes
 * @s: the string
 * @accept: set of bytes
 *
 * Return: a pointer to the byte in s that matches one of the bytes in accept
 */
char *_strpbrk(char *s, char *accept)
{
unsigned int i;
unsigned int j;
for (i = 0; s[i] != '\0'; i++)
{
for (j = 0; accept[j] != '\0'; j++)
{
if (s[i] == accept[j])
return (&s[i]);
}
}
return (NULL);
}
5-strstr.c/     0           0     0     644     484       `
#include "main.h"
/**
 * _strstr - a function that locates a substring
 * @haystack: locate a substring
 * @needle: substring to locate
 *
 * Return: pointer to the beginning of the located substring,
 * or NULL, if substring is not found
 */
char *_strstr(char *haystack, char *needle)
{
char *h = haystack;
char *n = needle;
while (*h)
{
n = needle;
h = haystack;
while (*n)
{
if (*h == *n)
{
n++;
h++;
}
else
break;
}
if (*n == '\0')
return (haystack);
haystack++;
}
return (0);
}
6-abs.c/        0           0     0     644     203       `
#include "main.h"
/**
 * _abs - value absolute
 * @n: the int to print
 * Return: 0 Always
 */
int _abs(int n)
{
if (n < 0)
{
return (n * (-1));
}
else if (n == 0)
{
return (0);
}
else
{
return (n);
}
}

9-strcpy.c/     0           0     0     644     416       `
#include "main.h"
#include <stdio.h>
/**
 * _strcpy - copies the string pointed to by src,
 * including the terminating null byte, to the
 * buffer pointed to by dest.
 * @dest: destination.
 * @src: source.
 * Return: the pointer to dest.
 */
char *_strcpy(char *dest, char *src)
{
int count = 0;
while (count >= 0)
{
*(dest + count) = *(src + count);
if (*(src + count) == '\0')
break;
count++;
}
return (dest);
}
_putchar.c/     0           0     0     644     249       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout*
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}


